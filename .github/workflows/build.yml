name: Run Asep

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: asep-build
  workflow_dispatch:

env:
  ASEPRITE_VERSION: '1.3.2'
  # RelWithDebInfo, Release
  BUILD_TYPE: Release
  CMAKE_VERSION: '3.27.8'
  NINJA_VERSION: '1.11.1'
  # gcc: m81-b607b32047, clang: m96-2f1f21b8a9 (Skia-Linux-Release-x64.zip), m102-861e4743af (Skia-Linux-Release-x64-libc++.zip)
  SKIA_VERSION: m102-861e4743af
  # CCACHE_VERSION: 4.6
  # ARCH: x86_64
  ARTIFACT_RETENTION_DAYS: 1

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            # (x86_64)
            # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
            name: "Windows 2019 MSVC", 
            artifact: "Windows.7z",
            os: windows-2019,
            cc: "cl", cxx: "cl",
            # vcvars64.bat (Use the 64-bit x64-native tools to build 64-bit x64 code.) 
            # set default parameters and call VsDevCmd.bat to set up the specified build architecture environment
            # https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-160
            # Or call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/VsDevCmd.bat" -arch=x64
            # "C:/Program Files/Microsoft Visual Studio/2022/Enterprise"
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            # (x86_64)
            # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2204-Readme.md
            name: "Ubuntu 22.04 Clang", 
            artifact: "Linux.7z",
            os: ubuntu-22.04,
            # cc: "gcc", cxx: "g++"
            cc: "clang", cxx: "clang++" # from Aseprite 1.2.31 due to skia upgrade to m96-2f1f21b8a9 from m81-b607b32047.
          }
        - { 
            # (x86_64)
            # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-12-Readme.md
            # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-12-Readme.md#installed-sdks
            name: "macOS 12 Clang", 
            artifact: "macOS.7z",
            os: macos-12,
            cc: "clang", cxx: "clang++"
          }

    steps:
      # - name: Checkout the Latest Source code
      #   shell: bash
      #   run: |
      #     git clone -b main --single-branch --recursive https://github.com/aseprite/aseprite.git .
      #     git pull
      #     git submodule update --init --recursive

      - name: Get the Latest Release Source Code
        shell: cmake -P {0}
        run: |
          set(aseprite_version $ENV{ASEPRITE_VERSION})
          message(STATUS "Aseprite version: ${aseprite_version}")
          file(DOWNLOAD "https://github.com/aseprite/aseprite/releases/download/v${aseprite_version}/Aseprite-v${aseprite_version}-Source.zip" ./aseprite.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./aseprite.zip)

      - name: Remove github actions LLVM and Clang
        if: runner.os == 'Linux'
        shell: bash
        run: sudo apt-get remove --auto-remove clang llvm -y

      # - name: Install LLVM and Clang
      #   if: runner.os == 'Linux'
      #   uses: KyleMayes/install-llvm-action@v1
      #   with:
      #     version: "14"

      - name: Print Clang version
        if: runner.os == 'Linux'
        shell: bash
        run: clang --version

      - name: Install Dependencies on Linux
        if: runner.os == 'Linux'
        # clang libc++-dev libc++abi-dev
        shell: bash
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y install clang-14 libc++-14-dev libc++abi-14-dev
          sudo apt-get -y --no-install-recommends install libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev

      - name: Download Skia and Other Dependencies
        shell: cmake -P {0}
        run: |
          set(skia_version $ENV{SKIA_VERSION})
          message(STATUS "Using Skia version: ${skia_version}")

          if ("${{ runner.os }}" STREQUAL "Windows")
            set(skia_suffix "Windows-Release-x64.zip")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(skia_suffix "Linux-Release-x64-libc++.zip")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(skia_suffix "macOS-Release-x64.zip")
          endif()

          set(skia_url "https://github.com/aseprite/skia/releases/download/${skia_version}/Skia-${skia_suffix}")
          file(DOWNLOAD "${skia_url}" $ENV{GITHUB_WORKSPACE}/deps/skia/skia.zip SHOW_PROGRESS)
          execute_process(
             COMMAND ${CMAKE_COMMAND} -E tar xvf skia.zip
             WORKING_DIRECTORY $ENV{GITHUB_WORKSPACE}/deps/skia
          )

      - name: Download CMake and Ninja
        shell: cmake -P {0}
        run: |
          set(cmake_version $ENV{CMAKE_VERSION})
          set(ninja_version $ENV{NINJA_VERSION})

          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

          if ("${{ runner.os }}" STREQUAL "Windows")
            set(ninja_suffix "win.zip")
            set(cmake_suffix "win64-x64.zip")
            set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(ninja_suffix "linux.zip")
            set(cmake_suffix "Linux-x86_64.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(ninja_suffix "mac.zip")
            set(cmake_suffix "Darwin-x86_64.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-Darwin-x86_64/CMake.app/Contents/bin")
          endif()

          set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
          file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)
          set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
          file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
          # Add to PATH environment variable
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")
          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND chmod +x ninja
              COMMAND chmod +x ${cmake_dir}/cmake
            )
          endif()

      - name: Check CMake and Ninja
        shell: bash
        run: |
          ninja --version
          cmake --version

      # - name: Download ccache
      #   id: ccache
      #   shell: cmake -P {0}
      #   run: |
      #     set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
      #     file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
      #     execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

      # - name: Prepare ccache timestamp
      #   id: ccache_cache_timestamp
      #   shell: cmake -P {0}
      #   run: |
      #     string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
      #     message("::set-output name=timestamp::${current_date}")

      # - name: ccache cache files
      #   uses: actions/cache@v1.1.0
      #   with:
      #     path: .ccache
      #     key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
      #     restore-keys: |
      #       ${{ matrix.config.name }}-ccache-

      # https://github.com/aseprite/laf#compile
      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})
          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            execute_process(
              COMMAND "${{ matrix.config.environment_script }}" && set
              OUTPUT_FILE environment_script_output.txt
            )
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()
          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
          if ("${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND cmake
                -S .
                -B build
                -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
                -D ENABLE_SENTRY=OFF
                -D ENABLE_CCACHE=OFF
                -D LAF_BACKEND=skia
                -D LAF_WITH_EXAMPLES=OFF
                -D LAF_WITH_TESTS=OFF
                -D SKIA_DIR=$ENV{GITHUB_WORKSPACE}/deps/skia
                -D SKIA_LIBRARY_DIR=$ENV{GITHUB_WORKSPACE}/deps/skia/out/Release-x64
                -D SKIA_LIBRARY=$ENV{GITHUB_WORKSPACE}/deps/skia/out/Release-x64/skia.lib
                -G Ninja
                -D CMAKE_MAKE_PROGRAM=ninja
              RESULT_VARIABLE result
            )
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            execute_process(
              COMMAND cmake
                -S .
                -B build
                -D CMAKE_C_COMPILER=clang
                -D CMAKE_CXX_COMPILER=clang++
                -D CMAKE_CXX_FLAGS=-stdlib=libc++
                -D CMAKE_EXE_LINKER_FLAGS=-stdlib=libc++
                -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
                -D ENABLE_SENTRY=OFF
                -D ENABLE_CCACHE=OFF
                -D LAF_BACKEND=skia
                -D LAF_WITH_EXAMPLES=OFF
                -D LAF_WITH_TESTS=OFF
                -D SKIA_DIR=$ENV{GITHUB_WORKSPACE}/deps/skia
                -D SKIA_LIBRARY_DIR=$ENV{GITHUB_WORKSPACE}/deps/skia/out/Release-x64
                -D SKIA_LIBRARY=$ENV{GITHUB_WORKSPACE}/deps/skia/out/Release-x64/libskia.a
                -G Ninja
                -D CMAKE_MAKE_PROGRAM=ninja
              RESULT_VARIABLE result
            )
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            execute_process(
              COMMAND cmake
                -S .
                -B build
                -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
                -D CMAKE_OSX_ARCHITECTURES=x86_64
                -D CMAKE_OSX_DEPLOYMENT_TARGET=10.9
                -D CMAKE_OSX_SYSROOT=/Applications/Xcode_13.4.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk
                -D ENABLE_SENTRY=OFF
                -D ENABLE_CCACHE=OFF
                -D LAF_BACKEND=skia
                -D LAF_WITH_EXAMPLES=OFF
                -D LAF_WITH_TESTS=OFF
                -D SKIA_DIR=$ENV{GITHUB_WORKSPACE}/deps/skia
                -D SKIA_LIBRARY_DIR=$ENV{GITHUB_WORKSPACE}/deps/skia/out/Release-x64
                -D SKIA_LIBRARY=$ENV{GITHUB_WORKSPACE}/deps/skia/out/Release-x64/libskia.a
                -G Ninja
                -D CMAKE_MAKE_PROGRAM=ninja
              RESULT_VARIABLE result
            )
          endif()
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()
          execute_process(
            COMMAND cmake --build build
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()

      - name: Install Strip
        run: cmake --install build --prefix instdir --strip

      - name: Pack
        working-directory: instdir
        run: cmake -E tar cfv ../${{ matrix.config.artifact }} --format=7zip .

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}
          if-no-files-found: error
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
